E//
// The contents of this file are subject to the Mozilla Public
// License Version 1.1 (the "License"); you may not use this file
// except in compliance with the License. You may obtain a copy
// of the License at http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an
// "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
// 
// The Original Code is State Machine Compiler (SMC).
// 
// The Initial Developer of the Original Code is Charles W. Rapp.
// Portions created by Charles W. Rapp are
// Copyright (C) 2006. Charles W. Rapp.
// All Rights Reserved.
// 
// Contributor(s):
//   Eitan Suez contributed examples/Ant.
//   (Name withheld) contributed the C# code generation and
//   examples/C#.
//   Francois Perrad contributed the Python code generation and
//   examples/Python.
//   Chris Liscio contributed the Objective-C code generation
//   and examples/ObjC.
//
// RCS ID
// $Id: SmcEBNF.txt,v 1.1 2009/03/01 18:20:42 cwrapp Exp $
//
// CHANGE LOG
// (See bottom of file.)
//

FSM := source? start_state class_name header_file? include_file*
package_name* import* declare* access* map+

source := '%{' raw_code '%}'

start_state := '%start' word

class_name := '%class' word

header_file := '%header' raw_code_line

include_file := '%include' raw_code_line

package_name := '%package' word

import := '%import' raw_code_line

declare := '%declare' raw_code_line

access := '%access' raw_code_line

map := '%map' word '%%' states '%%'

states := word entry? exit? '{' transitions* '}'

entry := 'Entry {' actions* '}'

exit := 'Exit {' actions '}'

transitions := word transition_args? guard? next_state '{' actions '}'

transition_args := '(' parameters ')'

parameters := parameter |
              parameter ',' parameters

parameter := word ':' raw_code

guard := '[' raw_code ']'

next_state := word |
              'nil' |
              push_transition |
              pop_transition

push_transition := word '/' 'push(' word ')' |
                   'nil/push(' word ')' |
                   'push(' word ')'

pop_transition := 'pop' |
                  'pop(' word? ')' |
                  'pop(' word ',' pop_arguments* ')'

pop_arguments := raw_code |
                 raw_code ',' pop_arguments

actions := dotnet_assignment |
           action |
           action actions

dotnet_assignment := word '=' raw_code ';'

action := word '(' arguments* ');'

arguments := raw_code |
             raw_code ',' arguments

word := [A-Za-z][A-Za-z0-9_.]* |
        _[A-Za-z][A-Za-z0-9_.]*

// Reads in code verbatim until end-of-line is reached.
raw_code_line := .* '\n\r\f'

// Read in code verbatim.
raw_code := .*

// Both the // and /* */ comment types are supported.
// Note: SMC honors nested /* */ comments.
comment1 := '//' .* '\n\r\f'
comment2 := '/*' .* '*/'

//
// CHANGE LOG
// $Log: SmcEBNF.txt,v $
// Revision 1.1  2009/03/01 18:20:42  cwrapp
// Preliminary v. 6.0.0 commit.
//
// Revision 1.2  2007/01/15 00:23:51  cwrapp
// Release 4.4.0 initial commit.
//
// Revision 1.1  2006/09/17 16:26:06  cwrapp
// Initial v. 4.3.3 check-in.
//
