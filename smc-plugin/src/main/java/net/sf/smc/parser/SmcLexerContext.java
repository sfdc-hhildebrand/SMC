/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : SmcLexer.sm
 */


/*
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy
 * of the License at http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an
 * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is State Machine Compiler (SMC).
 * 
 * The Initial Developer of the Original Code is Charles W. Rapp.
 * Portions created by Charles W. Rapp are
 * Copyright (C) 2000 - 2006, 2008. Charles W. Rapp.
 * All Rights Reserved.
 * 
 * Contributor(s):
 *   Eitan Suez contributed examples/Ant.
 *   (Name withheld) contributed the C# code generation and
 *   examples/C#.
 *   Francois Perrad contributed the Python code generation and
 *   examples/Python.
 *   Chris Liscio contributed the Objective-C code generation
 *   and examples/ObjC.
 *
 * smcLexer --
 *
 *  This statemap finds tokens in a statemap source file.
 *
 * RCS ID
 * $Id: SmcLexer.sm,v 1.4 2011/11/20 14:58:33 cwrapp Exp $
 *
 * CHANGE LOG
 * $Log: SmcLexer.sm,v $
 * Revision 1.4  2011/11/20 14:58:33  cwrapp
 * Check in for SMC v. 6.1.0
 *
 * Revision 1.3  2009/04/11 13:11:12  cwrapp
 * Corrected raw mode 3 to handle multiple argument template/generic declarations.
 *
 * Revision 1.2  2009/03/27 09:41:47  cwrapp
 * Added F. Perrad changes back in.
 *
 * Revision 1.1  2009/03/01 18:20:42  cwrapp
 * Preliminary v. 6.0.0 commit.
 *
 * Revision 1.10  2008/08/16 14:31:37  fperrad
 * + detabify
 *
 * Revision 1.9  2007/12/28 12:34:41  cwrapp
 * Version 5.0.1 check-in.
 *
 * Revision 1.8  2007/01/15 00:23:51  cwrapp
 * Release 4.4.0 initial commit.
 *
 * Revision 1.7  2006/09/16 15:04:29  cwrapp
 * Initial v. 4.3.3 check-in.
 *
 * Revision 1.6  2005/07/07 12:10:41  fperrad
 * Add a new token '$' for Perl language.
 *
 * Revision 1.5  2005/05/28 19:28:42  cwrapp
 * Moved to visitor pattern.
 *
 * Revision 1.5  2005/02/21 18:14:01  charlesr
 * Removed unknown FSM transition, using unicode transition
 * instead.
 *
 * Revision 1.4  2005/02/21 15:36:08  charlesr
 * Added Francois Perrad to Contributors section for Python work.
 *
 * Revision 1.3  2004/10/30 16:05:34  charlesr
 * Added unicode support.
 *
 * Revision 1.2  2004/09/06 16:40:22  charlesr
 * Added C# support.
 *
 * Revision 1.1  2004/01/29 02:14:49  charlesr
 * Add Default state containing single transition which
 * handles an unexpected asterisk.
 *
 * Revision 1.0  2003/12/14 21:04:00  charlesr
 * Initial revision
 *
 */


package net.sf.smc.parser;

import org.slf4j.LoggerFactory;
import org.slf4j.Logger;

import java.io.PrintStream;

public class SmcLexerContext
    extends statemap.FSMContext
{
	private final static Logger log = LoggerFactory.getLogger(SmcLexerContext.class);
	//---------------------------------------------------------------
	// Member methods.
	//

	public Logger getLog() {return log;}

	public SmcLexerContext(SmcLexer owner)
    {
        super (TokenMap.Start);

        _owner = owner;
    }

    public SmcLexerContext(SmcLexer owner, SmcLexerState initState)
    {
        super (initState);

        _owner = owner;
    }

    public void enterStartState()
    {
        getState().Entry(this);
        return;
    }

    public void EOL()
    {
        _transition = "EOL";
        getState().EOL(this);
        _transition = "";
        return;
    }

    public void alpha()
    {
        _transition = "alpha";
        getState().alpha(this);
        _transition = "";
        return;
    }

    public void asterisk()
    {
        _transition = "asterisk";
        getState().asterisk(this);
        _transition = "";
        return;
    }

    public void colon()
    {
        _transition = "colon";
        getState().colon(this);
        _transition = "";
        return;
    }

    public void comma()
    {
        _transition = "comma";
        getState().comma(this);
        _transition = "";
        return;
    }

    public void commentDone()
    {
        _transition = "commentDone";
        getState().commentDone(this);
        _transition = "";
        return;
    }

    public void digit()
    {
        _transition = "digit";
        getState().digit(this);
        _transition = "";
        return;
    }

    public void dollar()
    {
        _transition = "dollar";
        getState().dollar(this);
        _transition = "";
        return;
    }

    public void equal()
    {
        _transition = "equal";
        getState().equal(this);
        _transition = "";
        return;
    }

    public void gt()
    {
        _transition = "gt";
        getState().gt(this);
        _transition = "";
        return;
    }

    public void left_brace()
    {
        _transition = "left_brace";
        getState().left_brace(this);
        _transition = "";
        return;
    }

    public void left_bracket()
    {
        _transition = "left_bracket";
        getState().left_bracket(this);
        _transition = "";
        return;
    }

    public void left_paren()
    {
        _transition = "left_paren";
        getState().left_paren(this);
        _transition = "";
        return;
    }

    public void lt()
    {
        _transition = "lt";
        getState().lt(this);
        _transition = "";
        return;
    }

    public void percent()
    {
        _transition = "percent";
        getState().percent(this);
        _transition = "";
        return;
    }

    public void period()
    {
        _transition = "period";
        getState().period(this);
        _transition = "";
        return;
    }

    public void right_brace()
    {
        _transition = "right_brace";
        getState().right_brace(this);
        _transition = "";
        return;
    }

    public void right_paren()
    {
        _transition = "right_paren";
        getState().right_paren(this);
        _transition = "";
        return;
    }

    public void semicolon()
    {
        _transition = "semicolon";
        getState().semicolon(this);
        _transition = "";
        return;
    }

    public void slash()
    {
        _transition = "slash";
        getState().slash(this);
        _transition = "";
        return;
    }

    public void sourceDone()
    {
        _transition = "sourceDone";
        getState().sourceDone(this);
        _transition = "";
        return;
    }

    public void underscore()
    {
        _transition = "underscore";
        getState().underscore(this);
        _transition = "";
        return;
    }

    public void unicode()
    {
        _transition = "unicode";
        getState().unicode(this);
        _transition = "";
        return;
    }

    public void whitespace()
    {
        _transition = "whitespace";
        getState().whitespace(this);
        _transition = "";
        return;
    }

    public SmcLexerState getState()
        throws statemap.StateUndefinedException
    {
        if (_state == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((SmcLexerState) _state);
    }

    protected SmcLexer getOwner()
    {
        return (_owner);
    }

    public void setOwner(SmcLexer owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            _owner = owner;
        }

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private SmcLexer _owner;

    public static abstract class SmcLexerState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected SmcLexerState(String name, int id)
        {
            super (name, id);
        }

        protected void Entry(SmcLexerContext context) {}
        protected void Exit(SmcLexerContext context) {}

        protected void EOL(SmcLexerContext context)
        {
            Default(context);
        }

        protected void alpha(SmcLexerContext context)
        {
            Default(context);
        }

        protected void asterisk(SmcLexerContext context)
        {
            Default(context);
        }

        protected void colon(SmcLexerContext context)
        {
            Default(context);
        }

        protected void comma(SmcLexerContext context)
        {
            Default(context);
        }

        protected void commentDone(SmcLexerContext context)
        {
            Default(context);
        }

        protected void digit(SmcLexerContext context)
        {
            Default(context);
        }

        protected void dollar(SmcLexerContext context)
        {
            Default(context);
        }

        protected void equal(SmcLexerContext context)
        {
            Default(context);
        }

        protected void gt(SmcLexerContext context)
        {
            Default(context);
        }

        protected void left_brace(SmcLexerContext context)
        {
            Default(context);
        }

        protected void left_bracket(SmcLexerContext context)
        {
            Default(context);
        }

        protected void left_paren(SmcLexerContext context)
        {
            Default(context);
        }

        protected void lt(SmcLexerContext context)
        {
            Default(context);
        }

        protected void percent(SmcLexerContext context)
        {
            Default(context);
        }

        protected void period(SmcLexerContext context)
        {
            Default(context);
        }

        protected void right_brace(SmcLexerContext context)
        {
            Default(context);
        }

        protected void right_paren(SmcLexerContext context)
        {
            Default(context);
        }

        protected void semicolon(SmcLexerContext context)
        {
            Default(context);
        }

        protected void slash(SmcLexerContext context)
        {
            Default(context);
        }

        protected void sourceDone(SmcLexerContext context)
        {
            Default(context);
        }

        protected void underscore(SmcLexerContext context)
        {
            Default(context);
        }

        protected void unicode(SmcLexerContext context)
        {
            Default(context);
        }

        protected void whitespace(SmcLexerContext context)
        {
            Default(context);
        }

        protected void Default(SmcLexerContext context)
        {
            if (context.getDebugFlag() == true)
            {
                PrintStream str = 
                    context.getDebugStream();

                str.println(
                    "TRANSITION   : Default");
            }

            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //
    }

    /* package */ static abstract class TokenMap
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //
        public static final TokenMap_Start Start =
            new TokenMap_Start("TokenMap.Start", 0);
        public static final TokenMap_CommentStart CommentStart =
            new TokenMap_CommentStart("TokenMap.CommentStart", 1);
        public static final TokenMap_PercentStart PercentStart =
            new TokenMap_PercentStart("TokenMap.PercentStart", 2);
        public static final TokenMap_PercentKeyword PercentKeyword =
            new TokenMap_PercentKeyword("TokenMap.PercentKeyword", 3);
        public static final TokenMap_Word Word =
            new TokenMap_Word("TokenMap.Word", 4);
        public static final TokenMap_Scope Scope =
            new TokenMap_Scope("TokenMap.Scope", 5);
        public static final TokenMap_Colon Colon =
            new TokenMap_Colon("TokenMap.Colon", 6);
        private static final TokenMap_Default Default =
            new TokenMap_Default("TokenMap.Default", -1);

    }

    protected static class TokenMap_Default
        extends SmcLexerState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected TokenMap_Default(String name, int id)
        {
            super (name, id);
        }

        protected void asterisk(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Default.asterisk()");
            }

            context.clearState();
            try
            {
                ctxt.badToken("Unknown token");
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Default.asterisk()");
                }

                context.setState(TokenMap.Start);
                (context.getState()).Entry(context);
            }

            return;
        }
    //-----------------------------------------------------------
    // Member data.
    //
    }

    private static final class TokenMap_Start
        extends TokenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private TokenMap_Start(String name, int id)
        {
            super (name, id);
        }

        protected void EOL(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Start");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Start.EOL()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : TokenMap.Start.EOL()");
            }

            return;
        }

        protected void alpha(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Start");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Start.alpha()");
            }

            context.clearState();
            try
            {
                ctxt.startToken();
                ctxt.addToToken();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Start.alpha()");
                }

                context.setState(TokenMap.Word);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void colon(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Start");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Start.colon()");
            }

            context.clearState();
            try
            {
                ctxt.startToken();
                ctxt.addToToken();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Start.colon()");
                }

                context.setState(TokenMap.Colon);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void comma(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Start");
            }
            SmcLexerState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Start.comma()");
            }

            context.clearState();
            try
            {
                ctxt.startToken();
                ctxt.addToToken();
                ctxt.endToken(SmcLexer.COMMA);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Start.comma()");
                }

                context.setState(endState);
            }

            return;
        }

        protected void dollar(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Start");
            }
            SmcLexerState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Start.dollar()");
            }

            context.clearState();
            try
            {
                ctxt.startToken();
                ctxt.addToToken();
                ctxt.endToken(SmcLexer.DOLLAR);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Start.dollar()");
                }

                context.setState(endState);
            }

            return;
        }

        protected void equal(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Start");
            }
            SmcLexerState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Start.equal()");
            }

            context.clearState();
            try
            {
                ctxt.startToken();
                ctxt.addToToken();
                ctxt.endToken(SmcLexer.EQUAL);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Start.equal()");
                }

                context.setState(endState);
            }

            return;
        }

        protected void left_brace(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Start");
            }
            SmcLexerState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Start.left_brace()");
            }

            context.clearState();
            try
            {
                ctxt.startToken();
                ctxt.addToToken();
                ctxt.endToken(SmcLexer.LEFT_BRACE);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Start.left_brace()");
                }

                context.setState(endState);
            }

            return;
        }

        protected void left_bracket(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Start");
            }
            SmcLexerState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Start.left_bracket()");
            }

            context.clearState();
            try
            {
                ctxt.startToken();
                ctxt.addToToken();
                ctxt.endToken(SmcLexer.LEFT_BRACKET);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Start.left_bracket()");
                }

                context.setState(endState);
            }

            return;
        }

        protected void left_paren(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Start");
            }
            SmcLexerState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Start.left_paren()");
            }

            context.clearState();
            try
            {
                ctxt.startToken();
                ctxt.addToToken();
                ctxt.endToken(SmcLexer.LEFT_PAREN);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Start.left_paren()");
                }

                context.setState(endState);
            }

            return;
        }

        protected void percent(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Start");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Start.percent()");
            }

            context.clearState();
            try
            {
                ctxt.startToken();
                ctxt.addToToken();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Start.percent()");
                }

                context.setState(TokenMap.PercentStart);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void right_brace(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Start");
            }
            SmcLexerState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Start.right_brace()");
            }

            context.clearState();
            try
            {
                ctxt.startToken();
                ctxt.addToToken();
                ctxt.endToken(SmcLexer.RIGHT_BRACE);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Start.right_brace()");
                }

                context.setState(endState);
            }

            return;
        }

        protected void right_paren(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Start");
            }
            SmcLexerState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Start.right_paren()");
            }

            context.clearState();
            try
            {
                ctxt.startToken();
                ctxt.addToToken();
                ctxt.endToken(SmcLexer.RIGHT_PAREN);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Start.right_paren()");
                }

                context.setState(endState);
            }

            return;
        }

        protected void semicolon(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Start");
            }
            SmcLexerState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Start.semicolon()");
            }

            context.clearState();
            try
            {
                ctxt.startToken();
                ctxt.addToToken();
                ctxt.endToken(SmcLexer.SEMICOLON);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Start.semicolon()");
                }

                context.setState(endState);
            }

            return;
        }

        protected void slash(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Start");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Start.slash()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : TokenMap.Start.slash()");
            }

            context.setState(TokenMap.CommentStart);
            (context.getState()).Entry(context);
            return;
        }

        protected void underscore(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Start");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Start.underscore()");
            }

            context.clearState();
            try
            {
                ctxt.startToken();
                ctxt.addToToken();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Start.underscore()");
                }

                context.setState(TokenMap.Word);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void unicode(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Start");
            }
            SmcLexerState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Start.unicode()");
            }

            context.clearState();
            try
            {
                ctxt.startToken();
                ctxt.addToToken();
                ctxt.outputChar();
                ctxt.badToken("Unknown character");
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Start.unicode()");
                }

                context.setState(endState);
            }

            return;
        }

        protected void whitespace(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Start");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Start.whitespace()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : TokenMap.Start.whitespace()");
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class TokenMap_CommentStart
        extends TokenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private TokenMap_CommentStart(String name, int id)
        {
            super (name, id);
        }

        protected void Default(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.CommentStart");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.CommentStart.Default()");
            }

            context.clearState();
            try
            {
                ctxt.ungetChar();
                ctxt.endToken(SmcLexer.SLASH);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.CommentStart.Default()");
                }

                context.setState(TokenMap.Start);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void asterisk(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.CommentStart");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.CommentStart.asterisk()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : TokenMap.CommentStart.asterisk()");
            }

            context.pushState(OldCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void commentDone(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.CommentStart");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.CommentStart.commentDone()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : TokenMap.CommentStart.commentDone()");
            }

            context.setState(TokenMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void slash(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.CommentStart");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.CommentStart.slash()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : TokenMap.CommentStart.slash()");
            }

            context.pushState(NewCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class TokenMap_PercentStart
        extends TokenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private TokenMap_PercentStart(String name, int id)
        {
            super (name, id);
        }

        protected void Default(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.PercentStart");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.PercentStart.Default()");
            }

            context.clearState();
            try
            {
                ctxt.addToToken();
                ctxt.badToken("Unknown % directive");
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.PercentStart.Default()");
                }

                context.setState(TokenMap.Start);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void alpha(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.PercentStart");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.PercentStart.alpha()");
            }

            context.clearState();
            try
            {
                ctxt.addToToken();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.PercentStart.alpha()");
                }

                context.setState(TokenMap.PercentKeyword);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void left_brace(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.PercentStart");
            }
            SmcLexerState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.PercentStart.left_brace()");
            }

            context.clearState();
            try
            {
                ctxt.startToken();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.PercentStart.left_brace()");
                }

                context.setState(endState);
                context.pushState(SourceMap.Start);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void percent(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.PercentStart");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.PercentStart.percent()");
            }

            context.clearState();
            try
            {
                ctxt.addToToken();
                ctxt.endToken(SmcLexer.EOD);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.PercentStart.percent()");
                }

                context.setState(TokenMap.Start);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void right_brace(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.PercentStart");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.PercentStart.right_brace()");
            }

            context.clearState();
            try
            {
                ctxt.addToToken();
                ctxt.badToken("End-of-source appears without matching start-of-source");
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.PercentStart.right_brace()");
                }

                context.setState(TokenMap.Start);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void sourceDone(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.PercentStart");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.PercentStart.sourceDone()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : TokenMap.PercentStart.sourceDone()");
            }

            context.setState(TokenMap.Start);
            (context.getState()).Entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class TokenMap_PercentKeyword
        extends TokenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private TokenMap_PercentKeyword(String name, int id)
        {
            super (name, id);
        }

        protected void Default(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.PercentKeyword");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.PercentKeyword.Default()");
            }

            context.clearState();
            try
            {
                ctxt.addToToken();
                ctxt.badToken("Unknown % directive");
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.PercentKeyword.Default()");
                }

                context.setState(TokenMap.Start);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void EOL(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.PercentKeyword");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.PercentKeyword.EOL()");
            }

            context.clearState();
            try
            {
                ctxt.checkPercentKeyword();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.PercentKeyword.EOL()");
                }

                context.setState(TokenMap.Start);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void alpha(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.PercentKeyword");
            }
            SmcLexerState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.PercentKeyword.alpha()");
            }

            context.clearState();
            try
            {
                ctxt.addToToken();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.PercentKeyword.alpha()");
                }

                context.setState(endState);
            }

            return;
        }

        protected void whitespace(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.PercentKeyword");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.PercentKeyword.whitespace()");
            }

            context.clearState();
            try
            {
                ctxt.checkPercentKeyword();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.PercentKeyword.whitespace()");
                }

                context.setState(TokenMap.Start);
                (context.getState()).Entry(context);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class TokenMap_Word
        extends TokenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private TokenMap_Word(String name, int id)
        {
            super (name, id);
        }

        protected void Default(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Word");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Word.Default()");
            }

            context.clearState();
            try
            {
                ctxt.badToken("Unknown token");
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Word.Default()");
                }

                context.setState(TokenMap.Start);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void EOL(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Word");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Word.EOL()");
            }

            context.clearState();
            try
            {
                ctxt.checkKeyword();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Word.EOL()");
                }

                context.setState(TokenMap.Start);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void alpha(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Word");
            }
            SmcLexerState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Word.alpha()");
            }

            context.clearState();
            try
            {
                ctxt.addToToken();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Word.alpha()");
                }

                context.setState(endState);
            }

            return;
        }

        protected void asterisk(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Word");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Word.asterisk()");
            }

            context.clearState();
            try
            {
                ctxt.ungetChar();
                ctxt.checkKeyword();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Word.asterisk()");
                }

                context.setState(TokenMap.Start);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void colon(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Word");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Word.colon()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : TokenMap.Word.colon()");
            }

            context.setState(TokenMap.Scope);
            (context.getState()).Entry(context);
            return;
        }

        protected void comma(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Word");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Word.comma()");
            }

            context.clearState();
            try
            {
                ctxt.ungetChar();
                ctxt.checkKeyword();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Word.comma()");
                }

                context.setState(TokenMap.Start);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void digit(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Word");
            }
            SmcLexerState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Word.digit()");
            }

            context.clearState();
            try
            {
                ctxt.addToToken();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Word.digit()");
                }

                context.setState(endState);
            }

            return;
        }

        protected void dollar(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Word");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Word.dollar()");
            }

            context.clearState();
            try
            {
                ctxt.ungetChar();
                ctxt.checkKeyword();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Word.dollar()");
                }

                context.setState(TokenMap.Start);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void equal(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Word");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Word.equal()");
            }

            context.clearState();
            try
            {
                ctxt.ungetChar();
                ctxt.checkKeyword();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Word.equal()");
                }

                context.setState(TokenMap.Start);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void gt(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Word");
            }
            SmcLexerState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Word.gt()");
            }

            context.clearState();
            try
            {
                ctxt.addToToken();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Word.gt()");
                }

                context.setState(endState);
            }

            return;
        }

        protected void left_brace(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Word");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Word.left_brace()");
            }

            context.clearState();
            try
            {
                ctxt.ungetChar();
                ctxt.checkKeyword();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Word.left_brace()");
                }

                context.setState(TokenMap.Start);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void left_bracket(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Word");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Word.left_bracket()");
            }

            context.clearState();
            try
            {
                ctxt.ungetChar();
                ctxt.checkKeyword();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Word.left_bracket()");
                }

                context.setState(TokenMap.Start);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void left_paren(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Word");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Word.left_paren()");
            }

            context.clearState();
            try
            {
                ctxt.ungetChar();
                ctxt.checkKeyword();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Word.left_paren()");
                }

                context.setState(TokenMap.Start);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void lt(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Word");
            }
            SmcLexerState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Word.lt()");
            }

            context.clearState();
            try
            {
                ctxt.addToToken();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Word.lt()");
                }

                context.setState(endState);
            }

            return;
        }

        protected void period(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Word");
            }
            SmcLexerState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Word.period()");
            }

            context.clearState();
            try
            {
                ctxt.addToToken();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Word.period()");
                }

                context.setState(endState);
            }

            return;
        }

        protected void right_brace(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Word");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Word.right_brace()");
            }

            context.clearState();
            try
            {
                ctxt.ungetChar();
                ctxt.checkKeyword();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Word.right_brace()");
                }

                context.setState(TokenMap.Start);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void right_paren(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Word");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Word.right_paren()");
            }

            context.clearState();
            try
            {
                ctxt.ungetChar();
                ctxt.checkKeyword();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Word.right_paren()");
                }

                context.setState(TokenMap.Start);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void semicolon(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Word");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Word.semicolon()");
            }

            context.clearState();
            try
            {
                ctxt.ungetChar();
                ctxt.checkKeyword();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Word.semicolon()");
                }

                context.setState(TokenMap.Start);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void slash(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Word");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Word.slash()");
            }

            context.clearState();
            try
            {
                ctxt.ungetChar();
                ctxt.checkKeyword();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Word.slash()");
                }

                context.setState(TokenMap.Start);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void underscore(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Word");
            }
            SmcLexerState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Word.underscore()");
            }

            context.clearState();
            try
            {
                ctxt.addToToken();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Word.underscore()");
                }

                context.setState(endState);
            }

            return;
        }

        protected void whitespace(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Word");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Word.whitespace()");
            }

            context.clearState();
            try
            {
                ctxt.checkKeyword();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Word.whitespace()");
                }

                context.setState(TokenMap.Start);
                (context.getState()).Entry(context);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class TokenMap_Scope
        extends TokenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private TokenMap_Scope(String name, int id)
        {
            super (name, id);
        }

        protected void Default(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Scope");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Scope.Default()");
            }

            context.clearState();
            try
            {
                ctxt.ungetChar();
                ctxt.ungetChar();
                ctxt.checkKeyword();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Scope.Default()");
                }

                context.setState(TokenMap.Start);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void colon(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Scope");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Scope.colon()");
            }

            context.clearState();
            try
            {
                ctxt.addToToken("::");
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Scope.colon()");
                }

                context.setState(TokenMap.Word);
                (context.getState()).Entry(context);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class TokenMap_Colon
        extends TokenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private TokenMap_Colon(String name, int id)
        {
            super (name, id);
        }

        protected void Default(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Colon");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Colon.Default()");
            }

            context.clearState();
            try
            {
                ctxt.ungetChar();
                ctxt.addToToken(":");
                ctxt.endToken(SmcLexer.COLON);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Colon.Default()");
                }

                context.setState(TokenMap.Start);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void colon(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : TokenMap.Colon");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: TokenMap.Colon.colon()");
            }

            context.clearState();
            try
            {
                ctxt.addToToken("::");
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : TokenMap.Colon.colon()");
                }

                context.setState(TokenMap.Word);
                (context.getState()).Entry(context);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    /* package */ static abstract class OldCommentMap
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //
        public static final OldCommentMap_Start Start =
            new OldCommentMap_Start("OldCommentMap.Start", 0);
        public static final OldCommentMap_CommentStart CommentStart =
            new OldCommentMap_CommentStart("OldCommentMap.CommentStart", 1);
        public static final OldCommentMap_CommentEnd CommentEnd =
            new OldCommentMap_CommentEnd("OldCommentMap.CommentEnd", 2);
        private static final OldCommentMap_Default Default =
            new OldCommentMap_Default("OldCommentMap.Default", -1);

    }

    protected static class OldCommentMap_Default
        extends SmcLexerState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected OldCommentMap_Default(String name, int id)
        {
            super (name, id);
        }

        protected void alpha(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OldCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OldCommentMap.Default.alpha()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OldCommentMap.Default.alpha()");
            }

            context.setState(OldCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void digit(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OldCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OldCommentMap.Default.digit()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OldCommentMap.Default.digit()");
            }

            context.setState(OldCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void percent(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OldCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OldCommentMap.Default.percent()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OldCommentMap.Default.percent()");
            }

            context.setState(OldCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void slash(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OldCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OldCommentMap.Default.slash()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OldCommentMap.Default.slash()");
            }

            context.setState(OldCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void asterisk(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OldCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OldCommentMap.Default.asterisk()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OldCommentMap.Default.asterisk()");
            }

            context.setState(OldCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void left_brace(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OldCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OldCommentMap.Default.left_brace()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OldCommentMap.Default.left_brace()");
            }

            context.setState(OldCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void right_brace(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OldCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OldCommentMap.Default.right_brace()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OldCommentMap.Default.right_brace()");
            }

            context.setState(OldCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void left_bracket(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OldCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OldCommentMap.Default.left_bracket()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OldCommentMap.Default.left_bracket()");
            }

            context.setState(OldCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void left_paren(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OldCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OldCommentMap.Default.left_paren()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OldCommentMap.Default.left_paren()");
            }

            context.setState(OldCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void right_paren(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OldCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OldCommentMap.Default.right_paren()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OldCommentMap.Default.right_paren()");
            }

            context.setState(OldCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void period(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OldCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OldCommentMap.Default.period()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OldCommentMap.Default.period()");
            }

            context.setState(OldCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void lt(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OldCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OldCommentMap.Default.lt()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OldCommentMap.Default.lt()");
            }

            context.setState(OldCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void gt(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OldCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OldCommentMap.Default.gt()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OldCommentMap.Default.gt()");
            }

            context.setState(OldCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void colon(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OldCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OldCommentMap.Default.colon()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OldCommentMap.Default.colon()");
            }

            context.setState(OldCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void comma(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OldCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OldCommentMap.Default.comma()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OldCommentMap.Default.comma()");
            }

            context.setState(OldCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void semicolon(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OldCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OldCommentMap.Default.semicolon()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OldCommentMap.Default.semicolon()");
            }

            context.setState(OldCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void underscore(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OldCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OldCommentMap.Default.underscore()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OldCommentMap.Default.underscore()");
            }

            context.setState(OldCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void equal(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OldCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OldCommentMap.Default.equal()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OldCommentMap.Default.equal()");
            }

            context.setState(OldCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void dollar(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OldCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OldCommentMap.Default.dollar()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OldCommentMap.Default.dollar()");
            }

            context.setState(OldCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void whitespace(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OldCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OldCommentMap.Default.whitespace()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OldCommentMap.Default.whitespace()");
            }

            context.setState(OldCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void EOL(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OldCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OldCommentMap.Default.EOL()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OldCommentMap.Default.EOL()");
            }

            context.setState(OldCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void unicode(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OldCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OldCommentMap.Default.unicode()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OldCommentMap.Default.unicode()");
            }

            context.setState(OldCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }
    //-----------------------------------------------------------
    // Member data.
    //
    }

    private static final class OldCommentMap_Start
        extends OldCommentMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private OldCommentMap_Start(String name, int id)
        {
            super (name, id);
        }

        protected void asterisk(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OldCommentMap.Start");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OldCommentMap.Start.asterisk()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OldCommentMap.Start.asterisk()");
            }

            context.setState(OldCommentMap.CommentEnd);
            (context.getState()).Entry(context);
            return;
        }

        protected void slash(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OldCommentMap.Start");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OldCommentMap.Start.slash()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OldCommentMap.Start.slash()");
            }

            context.setState(OldCommentMap.CommentStart);
            (context.getState()).Entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class OldCommentMap_CommentStart
        extends OldCommentMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private OldCommentMap_CommentStart(String name, int id)
        {
            super (name, id);
        }

        protected void asterisk(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OldCommentMap.CommentStart");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OldCommentMap.CommentStart.asterisk()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OldCommentMap.CommentStart.asterisk()");
            }

            context.pushState(OldCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void commentDone(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OldCommentMap.CommentStart");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OldCommentMap.CommentStart.commentDone()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OldCommentMap.CommentStart.commentDone()");
            }

            context.setState(OldCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void slash(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OldCommentMap.CommentStart");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OldCommentMap.CommentStart.slash()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OldCommentMap.CommentStart.slash()");
            }

            context.pushState(NewCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class OldCommentMap_CommentEnd
        extends OldCommentMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private OldCommentMap_CommentEnd(String name, int id)
        {
            super (name, id);
        }

        protected void asterisk(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OldCommentMap.CommentEnd");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OldCommentMap.CommentEnd.asterisk()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OldCommentMap.CommentEnd.asterisk()");
            }

            return;
        }

        protected void slash(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : OldCommentMap.CommentEnd");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: OldCommentMap.CommentEnd.slash()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : OldCommentMap.CommentEnd.slash()");
            }

            context.popState();

            context.commentDone();
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    /* package */ static abstract class NewCommentMap
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //
        public static final NewCommentMap_Start Start =
            new NewCommentMap_Start("NewCommentMap.Start", 0);
        private static final NewCommentMap_Default Default =
            new NewCommentMap_Default("NewCommentMap.Default", -1);

    }

    protected static class NewCommentMap_Default
        extends SmcLexerState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected NewCommentMap_Default(String name, int id)
        {
            super (name, id);
        }

        protected void alpha(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : NewCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: NewCommentMap.Default.alpha()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : NewCommentMap.Default.alpha()");
            }

            context.setState(NewCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void digit(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : NewCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: NewCommentMap.Default.digit()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : NewCommentMap.Default.digit()");
            }

            context.setState(NewCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void percent(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : NewCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: NewCommentMap.Default.percent()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : NewCommentMap.Default.percent()");
            }

            context.setState(NewCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void slash(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : NewCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: NewCommentMap.Default.slash()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : NewCommentMap.Default.slash()");
            }

            context.setState(NewCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void asterisk(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : NewCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: NewCommentMap.Default.asterisk()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : NewCommentMap.Default.asterisk()");
            }

            context.setState(NewCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void left_brace(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : NewCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: NewCommentMap.Default.left_brace()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : NewCommentMap.Default.left_brace()");
            }

            context.setState(NewCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void right_brace(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : NewCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: NewCommentMap.Default.right_brace()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : NewCommentMap.Default.right_brace()");
            }

            context.setState(NewCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void left_bracket(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : NewCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: NewCommentMap.Default.left_bracket()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : NewCommentMap.Default.left_bracket()");
            }

            context.setState(NewCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void left_paren(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : NewCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: NewCommentMap.Default.left_paren()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : NewCommentMap.Default.left_paren()");
            }

            context.setState(NewCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void right_paren(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : NewCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: NewCommentMap.Default.right_paren()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : NewCommentMap.Default.right_paren()");
            }

            context.setState(NewCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void period(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : NewCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: NewCommentMap.Default.period()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : NewCommentMap.Default.period()");
            }

            context.setState(NewCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void lt(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : NewCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: NewCommentMap.Default.lt()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : NewCommentMap.Default.lt()");
            }

            context.setState(NewCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void gt(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : NewCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: NewCommentMap.Default.gt()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : NewCommentMap.Default.gt()");
            }

            context.setState(NewCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void colon(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : NewCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: NewCommentMap.Default.colon()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : NewCommentMap.Default.colon()");
            }

            context.setState(NewCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void comma(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : NewCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: NewCommentMap.Default.comma()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : NewCommentMap.Default.comma()");
            }

            context.setState(NewCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void semicolon(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : NewCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: NewCommentMap.Default.semicolon()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : NewCommentMap.Default.semicolon()");
            }

            context.setState(NewCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void underscore(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : NewCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: NewCommentMap.Default.underscore()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : NewCommentMap.Default.underscore()");
            }

            context.setState(NewCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void equal(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : NewCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: NewCommentMap.Default.equal()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : NewCommentMap.Default.equal()");
            }

            context.setState(NewCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void dollar(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : NewCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: NewCommentMap.Default.dollar()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : NewCommentMap.Default.dollar()");
            }

            context.setState(NewCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void whitespace(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : NewCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: NewCommentMap.Default.whitespace()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : NewCommentMap.Default.whitespace()");
            }

            context.setState(NewCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }

        protected void unicode(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : NewCommentMap.Default");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: NewCommentMap.Default.unicode()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : NewCommentMap.Default.unicode()");
            }

            context.setState(NewCommentMap.Start);
            (context.getState()).Entry(context);
            return;
        }
    //-----------------------------------------------------------
    // Member data.
    //
    }

    private static final class NewCommentMap_Start
        extends NewCommentMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private NewCommentMap_Start(String name, int id)
        {
            super (name, id);
        }

        protected void EOL(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : NewCommentMap.Start");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: NewCommentMap.Start.EOL()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : NewCommentMap.Start.EOL()");
            }

            context.popState();

            context.commentDone();
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    /* package */ static abstract class SourceMap
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //
        public static final SourceMap_Start Start =
            new SourceMap_Start("SourceMap.Start", 0);
        public static final SourceMap_SourceEnd SourceEnd =
            new SourceMap_SourceEnd("SourceMap.SourceEnd", 1);
        public static final SourceMap_NeverUsed NeverUsed =
            new SourceMap_NeverUsed("SourceMap.NeverUsed", 2);
        private static final SourceMap_Default Default =
            new SourceMap_Default("SourceMap.Default", -1);

    }

    protected static class SourceMap_Default
        extends SmcLexerState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected SourceMap_Default(String name, int id)
        {
            super (name, id);
        }
    //-----------------------------------------------------------
    // Member data.
    //
    }

    private static final class SourceMap_Start
        extends SourceMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private SourceMap_Start(String name, int id)
        {
            super (name, id);
        }

        protected void Default(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : SourceMap.Start");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: SourceMap.Start.Default()");
            }

            context.clearState();
            try
            {
                ctxt.addToToken();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : SourceMap.Start.Default()");
                }

                context.setState(SourceMap.Start);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void percent(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : SourceMap.Start");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: SourceMap.Start.percent()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : SourceMap.Start.percent()");
            }

            context.setState(SourceMap.SourceEnd);
            (context.getState()).Entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class SourceMap_SourceEnd
        extends SourceMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private SourceMap_SourceEnd(String name, int id)
        {
            super (name, id);
        }

        protected void Default(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : SourceMap.SourceEnd");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: SourceMap.SourceEnd.Default()");
            }

            context.clearState();
            try
            {
                ctxt.addToToken("%");
                ctxt.addToToken();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : SourceMap.SourceEnd.Default()");
                }

                context.setState(SourceMap.Start);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void percent(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : SourceMap.SourceEnd");
            }
            SmcLexerState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: SourceMap.SourceEnd.percent()");
            }

            context.clearState();
            try
            {
                ctxt.addToToken("%");
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : SourceMap.SourceEnd.percent()");
                }

                context.setState(endState);
            }

            return;
        }

        protected void right_brace(SmcLexerContext context)
        {
            SmcLexer ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : SourceMap.SourceEnd");
            }
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: SourceMap.SourceEnd.right_brace()");
            }

            context.clearState();
            try
            {
                ctxt.endToken(SmcLexer.SOURCE);
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("EXIT TRANSITION : SourceMap.SourceEnd.right_brace()");
                }

                context.popState();
            }


            context.sourceDone();
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }

    private static final class SourceMap_NeverUsed
        extends SourceMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private SourceMap_NeverUsed(String name, int id)
        {
            super (name, id);
        }

        protected void EOL(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : SourceMap.NeverUsed");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: SourceMap.NeverUsed.EOL()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : SourceMap.NeverUsed.EOL()");
            }

            return;
        }

        protected void alpha(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : SourceMap.NeverUsed");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: SourceMap.NeverUsed.alpha()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : SourceMap.NeverUsed.alpha()");
            }

            return;
        }

        protected void asterisk(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : SourceMap.NeverUsed");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: SourceMap.NeverUsed.asterisk()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : SourceMap.NeverUsed.asterisk()");
            }

            return;
        }

        protected void colon(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : SourceMap.NeverUsed");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: SourceMap.NeverUsed.colon()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : SourceMap.NeverUsed.colon()");
            }

            return;
        }

        protected void comma(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : SourceMap.NeverUsed");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: SourceMap.NeverUsed.comma()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : SourceMap.NeverUsed.comma()");
            }

            return;
        }

        protected void digit(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : SourceMap.NeverUsed");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: SourceMap.NeverUsed.digit()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : SourceMap.NeverUsed.digit()");
            }

            return;
        }

        protected void dollar(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : SourceMap.NeverUsed");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: SourceMap.NeverUsed.dollar()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : SourceMap.NeverUsed.dollar()");
            }

            return;
        }

        protected void equal(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : SourceMap.NeverUsed");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: SourceMap.NeverUsed.equal()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : SourceMap.NeverUsed.equal()");
            }

            return;
        }

        protected void gt(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : SourceMap.NeverUsed");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: SourceMap.NeverUsed.gt()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : SourceMap.NeverUsed.gt()");
            }

            return;
        }

        protected void left_brace(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : SourceMap.NeverUsed");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: SourceMap.NeverUsed.left_brace()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : SourceMap.NeverUsed.left_brace()");
            }

            return;
        }

        protected void left_bracket(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : SourceMap.NeverUsed");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: SourceMap.NeverUsed.left_bracket()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : SourceMap.NeverUsed.left_bracket()");
            }

            return;
        }

        protected void left_paren(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : SourceMap.NeverUsed");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: SourceMap.NeverUsed.left_paren()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : SourceMap.NeverUsed.left_paren()");
            }

            return;
        }

        protected void lt(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : SourceMap.NeverUsed");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: SourceMap.NeverUsed.lt()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : SourceMap.NeverUsed.lt()");
            }

            return;
        }

        protected void period(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : SourceMap.NeverUsed");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: SourceMap.NeverUsed.period()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : SourceMap.NeverUsed.period()");
            }

            return;
        }

        protected void right_brace(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : SourceMap.NeverUsed");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: SourceMap.NeverUsed.right_brace()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : SourceMap.NeverUsed.right_brace()");
            }

            return;
        }

        protected void right_paren(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : SourceMap.NeverUsed");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: SourceMap.NeverUsed.right_paren()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : SourceMap.NeverUsed.right_paren()");
            }

            return;
        }

        protected void semicolon(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : SourceMap.NeverUsed");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: SourceMap.NeverUsed.semicolon()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : SourceMap.NeverUsed.semicolon()");
            }

            return;
        }

        protected void slash(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : SourceMap.NeverUsed");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: SourceMap.NeverUsed.slash()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : SourceMap.NeverUsed.slash()");
            }

            return;
        }

        protected void underscore(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : SourceMap.NeverUsed");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: SourceMap.NeverUsed.underscore()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : SourceMap.NeverUsed.underscore()");
            }

            return;
        }

        protected void unicode(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : SourceMap.NeverUsed");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: SourceMap.NeverUsed.unicode()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : SourceMap.NeverUsed.unicode()");
            }

            return;
        }

        protected void whitespace(SmcLexerContext context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("LEAVING STATE   : SourceMap.NeverUsed");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("ENTER TRANSITION: SourceMap.NeverUsed.whitespace()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("EXIT TRANSITION : SourceMap.NeverUsed.whitespace()");
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
